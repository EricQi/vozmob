<?php
// $Id$

/**
 * @file
 * Create a "blacklist" of files which are not permitted to be uploaded.
 */

/**
 * Implementation of hook_perm().
 */
function fileblacklist_perm() {
  $perms = array('administer file blacklist', 'add files to blacklist');
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function fileblacklist_menu() {
  $items['admin/settings/fileblacklist'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fileblacklist_settings'),
    'access arguments' => array('administer file blacklist'),
    'type' => MENU_CALLBACK,
    'file' => 'fileblacklist.inc',
  );
  $items['admin/content/fileblacklist'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fileblacklist_list'),
    'access arguments' => array('administer file blacklist'),
    'type' => MENU_CALLBACK,
    'file' => 'fileblacklist.inc',
  );
  return $items;
}

/**
 * Check whether or not a file is listed in the blacklist.
 *
 * @param $filepath A string containing a file path.
 * @param $form_item An optional string containing the name of a form item that
 *   any errors will be attached to. 
 * @return FALSE if file is not denied, or fileblacklist object if file is denied.
 */
function fileblacklist_filepath_check($filepath, $form_item = NULL) {
  $blacklist = db_fetch_object(db_query("SELECT * FROM {fileblacklist} WHERE sha256 = '%s'", hash_file('sha256', $filepath)));
  if ($blacklist && $blacklist->type && $form_item) {
    form_set_error($form_item, t('The file is not permitted.'));
  }
  return $blacklist;
}

/**
 * Add a file to the file blacklist.
 *
 * @param $file A file object.
 * @return A blacklisted file object if file was added successfully 
 *   or was already listed in the blacklist.
 */
function fileblacklist_file_add($old_file, $type = NULL) {
  global $user;

  // Calculate the SHA256 and check if the file is already listed.
  $filepath = $old_file->filepath;
  $sha256 = hash_file('sha256', $filepath);
  if ($file = db_fetch_object(db_query("SELECT * FROM {fileblacklist} WHERE sha256 = '%s' LIMIT 1", $sha256))) {
    drupal_set_message(t('File is already listed in blacklist.'));
    return $file;
  }

  // We'll be creating a new file object so let's clone the original file object.
  $file = clone($old_file);

  // Create directories.
  $path_parts = array(
    file_create_path('blacklist'),
    gmdate('Y', $_SERVER['REQUEST_TIME']),
    gmdate('m', $_SERVER['REQUEST_TIME']),
    gmdate('d', $_SERVER['REQUEST_TIME']),
  );
  foreach ($path_parts as $path_part) {
    $path = (isset($path) ? $path . '/' : '') . $path_part;
    file_check_directory($path, FILE_CREATE_DIRECTORY);
  }

  // Generate a unique filename
  $path_parts = pathinfo($filepath);
  $filename = hash('sha256', microtime() . $sha256 . drupal_get_secret_key()) . '.' . $path_parts['extension'];

  // Copy file into fileblacklist directory.
  $destination = file_destination($path . '/' . $filename, FILE_EXISTS_RENAME);
  if (!file_copy($filepath, $destination, FILE_EXISTS_RENAME)) {
    drupal_set_message(t('Error detected while copying file.'));
    return FALSE;
  }

  // Add entry to files table.
  $file->fid = NULL;
  $file->uid = $user->uid;
  $file->filepath = $filepath;
  $file->status = FILE_STATUS_PERMANENT;
  $file->timestamp = $_SERVER['REQUEST_TIME'];
  drupal_write_record('files', $file);

  // Add entry to fileblacklist table.
  $file->sha256 = $sha256;
  drupal_write_record('fileblacklist', $file);

  return $file;
}
